% render "templates/web/layouts/doc.html", tab: :developers_branching do

## Developers

--------------

### Making Branch Releases


From time to time it may be necessary to split the environment onto
a branch, the most common reason for this will be to issue a bug fix to an existing
release at a time when the Trunk is not stable and suitable for an
immediate release.

The following procedure should be followed to do this:

#### 1. Populate a Fresh Workspace with the Base Release

While in theory this step is not required it is safest to start with 
a completely fresh workspace to ensure that any pre-existing selector overrides
that may be in an existing workspace do not come into play.

Follow the environment installation instructions for the given release
from the [archive pages](<%= path "/archive" %>).

#### 2. Set the Selector to Use a Branch

Firstly identify if the base release is already on a branch or not, this can be
found from the selector quoted in the release notes.
If it is on a branch the selector will be something other than 'Trunk' and the
existing selector should be re-used to continue the new patch on the same branch.

If the base tag is on Trunk then you must create a new branch a name, this can be free
format but **you must ensure that it is unique** - re-using a name that is already in use
somewhere unrelated will lead to misery. If in doubt append today's date to your chosen
name to guarantee uniqueness.

Let's say our banch will be called "bin202\_fix\_07082012", the selector will be:

~~~
'Auto(bin202_fix_07082012),Trunk'
~~~

This tells DesignSync that any new checkin that we make in this workspace should
automatically go onto the branch. It also states priorities when populating the
workspace, meaning that for a given file the version from the branch should be
picked if it exists, otherwise fall back to Trunk.

Note that this only applies if populating/checking out without a version argument.
If you supply an explicit version tag then this will override the selector regardless
of what branch the tagged version resides on. Checking in a new version however would
still add it to our new branch.

Set the selector by running the following command **from the top-level of the workspace**,
obviously substituting the selector name where appropriate:

~~~
dssc setselector 'Auto(bin202_fix_07082012),Trunk' .
~~~

#### 3. Make the Patches

Update the required files and check them in as normal, the command line feedback should reflect
that a new version has been added to the branch.

If you modify a file that has since been retired in Trunk you will get a error and
the advice to try again by adding the -new switch. You can safely do this and the file will
be re-instated on the branch while remaining retired on Trunk.

**Adding new files to the branch should be avoided in cases where you want the
new file to end up in the Trunk in the future.** In this case you should switch
to a Trunk workspace, add the new file, then return to the branch workspace and populate
it. This will prevent a lot of trouble when it comes to trying to deal with the file
in the Trunk.

If you are confident that the new file is specific to the branch and that it will never be
needed in the Trunk then it can be added on the branch by simply checking in with
the -new switch.

Concerns with skipped versions are the same on the branch as they would be on the Trunk.
If you get the case where a file cannot be checked in without -skip then it means
that more development has occurred on the branch since the base release tag and in that
case you must decide what to do on a case by case basis. Typically this should never
occur as long as you discard the branch workspace once you have released and then
make sure development returns to Trunk. Also having bug specific branches will help
to avoid this rather than having a long-running branch that is re-used many times.

Note that if you are feeling DesignSync-savvy enough you can branch off from a
branch by using selectors like:

~~~
'Auto(bin202_fix_23082012),bin202_fix_07082012,Trunk'
~~~

#### 4. Release

Release by running 'rgen tag' as normal, this will automatically pick up the branch
selector from the workspace and include it in the release notes.


% end
