% render "layouts/basic.html" do

%# HTML tags can be embedded in mark down files if you want to do specific custom
%# formatting like this, but in most cases that is not required.
<h1><%= Origen.config.name %> <span style="font-size: 14px">(<%= Origen.app.version %>)</span></h1>

Welcome to your application's documentation...

Here are some pointers to get you started with writing Origen documents:

### Markdown

Most of your documents (such as this one you are reading) will be written in Markdown. This
allows you to create good looking and well formatted web-based documents easily and without
having to know anything about HTML.

Origen uses the Kramdown library to process the Markdown, this has a good quick reference
guide on the Markdown syntax here: [Markdown Quick Reference](http://kramdown.rubyforge.org/quickref.html)

### Links

Links can be added to your documents easily, like this one for example:

* [Freescale](http://www.freescale.com)

For linking to other pages within your own documents it is recommended that you use the
'path' helper to generate the url. By doing this Origen should generate links that work
correctly for both serving documents locally when developing and when deploying to a remote
web server. Here is an example:

* [Docs](<%= path "/docs/environment/introduction" %>)

### Code Examples

In the course of writing documentation you will probably want to show code examples
from time to time. Generic code snippets can be easily formatted with a mono-spaced
font like this:

~~~
origen t debug
origen g list/production.list
~~~

If you are showing examples of Ruby then they can be easily syntax-highlighted for
better presentation:

~~~ruby
# Cool, this is easy
def some_ruby
  @blah = Blah.new
end
~~~

Origen uses the Coderay library for syntax highlighting and therefore should in theory
be able to highlight all languages listed here: [CodeRay Syntax Highlighting](http://coderay.rubychan.de/)

### Custom HTML

You may occasionally wish to have low level control of your documentation's HTML, this
can be done by simply embedding the HTML directly alongside the Markdown.

Origen already uses the [Twitter Bootstrap](http://twitter.github.io/bootstrap/index.html)
framework to generate these documents, so you already have full access to the features
provided by that framework.

For example here is how to insert a [Bootstrap alert](http://twitter.github.io/bootstrap/components.html#alerts):

<div class="alert">
  <button type="button" class="close" data-dismiss="alert">&times;</button>
  <strong>Warning!</strong> This example was just copied directly from the bootstrap documentation!
</div>

% end
