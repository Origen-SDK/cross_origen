% render "layouts/basic.html" do

%# HTML tags can be embedded in mark down files if you want to do specific custom
%# formatting like this, but in most cases that is not required.
<h1><%= RGen.config.name %> <span style="font-size: 14px">(<%= RGen.app.version %>)</span></h1>

### Purpose

In an ideal world everyone would use RGen however in reality there are many different
'standards' and formats used to represent design data within Freescale. This plugin
provides APIs and templates to import and export data to formats supported by 3rd
party tools.

### How To Import

In your Gemfile add:

~~~ruby
gem "<%= RGen.app.name %>", ">= <%= RGen.app.version %>"
~~~

or if your application is a plugin add this to your .gemspec

~~~ruby
spec.add_runtime_dependency "<%= RGen.app.name %>", ">= <%= RGen.app.version %>"
~~~

### How To Use

#### Supported Formats

Currently the following formats are supported:

* SIDSC (SSDS) - Import and Export Register Definitions and Top-level Metadata
* IP-XACT - Export register Definitions
* VER2PAT - Import pin defintions
* Pin Tool - Import pin defintions
* RALF (Synopsys format) - Export register defintions
* TCU Registers in Excel - TCU Register and bit descriptions specific to the style IDC use 
* CRR - Common Register Repository

See the [examples](<%= path "examples" %>) for format specific documentation, but
most formats should follow this basic structure...

#### Data Import  

When the <code>RosettaStone</code> module is included in a class it gets access
to an <code>rs_import</code> method.
This will automatically detect the type of the given file and select the appropriate
import rules.

The file to be imported must exist locally or it can be pulled automatically from
a 3rd party respository in which case the file will be fetched the first time RGen
is invoked and then cached locally for future invocations.
Supported repositories are shown in the example below.

~~~ruby
class D_IP_ANA_TEST_ANNEX_SYN

  include RosettaStone

  def initialize
    # Import from a local file
    rs_import(path: "#{RGen.root}/imports/test-annex-Block-registers.xml")
    # Import from Docato (SSDS)
    rs_import(docato_id: 456300, version: 61)
    # Import from Design Sync
    rs_import(vault: "sync://sync-15040:15040/Projects/nvm_c90tfsn2w/ftf2/rtl_v/kx2_4m/.regs", version: "ftf2_kx2_4096k2_256_128k_64_4k.00.00.01.00") 
  end

end
~~~

The plugin will add attribute getter and setter methods to the top-level object and to registers and bits
to contain any metadata information which does not have a direct equivalent within RGen. Generally
the name given to such data will be the lower cased and underscored (following std Ruby
conventions) version of the attribute name.

#### Data Export

The <code>RosettaStone</code> module adds some methods to export the given object
as a string in the given format, for example a <code>to_sidsc</code> method is available
to generate an SIDSC XML representation of an object.

To create an actual XML file a simple template would be setup as shown below
and then compiled through RGen:

~~~eruby
<%= "<" + "%= $dut.to_sidsc %" + ">" %>
~~~

In future support may be added to export directly to a 3rd party tool if
it provides such an API.

### How To Setup a Development Environment

~~~text
mkdir <%= RGen.app.config.initials.downcase %>
cd <%= RGen.app.config.initials.downcase %>
dssc setvault <%= RGen.app.config.vault %> .
dssc pop -rec -get .
~~~

Follow the instructions here if you want to make a 3rd party app
workspace use your development copy of the <%= RGen.app.config.initials %> plugin:
[Setting up a Plugin Development Environment](http://rgen.freescale.net/rgen/latest/guides/libraries/environment)

This plugin also contains a test suite, make sure this passes before committing
any changes!

~~~text
rgen examples
rgen specs
~~~

% end
