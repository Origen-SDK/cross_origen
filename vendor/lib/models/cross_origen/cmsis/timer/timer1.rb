# This file was generated by Origen, any hand edits will likely get overwritten
# rubocop:disable all
module CrossOrigen
  module Cmsis
    module Timer
      module Timer1
        def self.extended(model)
          # Control Register
          model.add_reg :cr, 0x0, size: 32 do |reg|
            # Control Register
            reg.bit 31, :s
            # Control Register
            reg.bit 27..26, :idr
            # Control Register
            reg.bit 25..24, :reload
            # Control Register
            reg.bit 21..20, :trgext
            # Control Register
            reg.bit 17..16, :capedge
            # Control Register
            reg.bit 15..12, :capsrc
            # Control Register
            reg.bit 11..8, :cntsrc
            # Control Register
            reg.bit 7, :psc
            # Control Register
            reg.bit 6..4, :mode
            # Control Register
            reg.bit 3..2, :cnt
            # Control Register
            reg.bit 1, :rst
            # Control Register
            reg.bit 0, :en
          end
          # Status Register
          model.add_reg :sr, 0x4, size: 16 do |reg|
            # Status Register
            reg.bit 15..14, :reload, access: :ro
            # Status Register
            reg.bit 12, :rst, access: :ro
            # Status Register
            reg.bit 10, :ov
            # Status Register
            reg.bit 9, :un
            # Status Register
            reg.bit 8, :match
            # Status Register
            reg.bit 0, :run, access: :ro
          end
          # Interrupt Register
          model.add_reg :int, 0x10, size: 16 do |reg|
            # Interrupt Register
            reg.bit 6..4, :mode
            # Interrupt Register
            reg.bit 0, :en
          end
          # The Counter Register reflects the actual Value of the Timer/Counter
          model.add_reg :count, 0x20, size: 32 do |reg|
          end
          # The Match Register stores the compare Value for the MATCH condition
          model.add_reg :match, 0x24, size: 32 do |reg|
          end
          # The Prescale Register stores the Value for the prescaler. The cont event gets divided by this value
          model.add_reg :prescale_rd, 0x28, size: 32 do |reg|
          end
          # The Prescale Register stores the Value for the prescaler. The cont event gets divided by this value
          model.add_reg :prescale_wr, 0x28, size: 32 do |reg|
          end
          # The Reload Register stores the Value the COUNT Register gets reloaded on a when a condition was met.
          model.add_reg :reload0, 0x50, size: 32 do |reg|
          end
          # The Reload Register stores the Value the COUNT Register gets reloaded on a when a condition was met.
          model.add_reg :reload1, 0x54, size: 32 do |reg|
          end
          # The Reload Register stores the Value the COUNT Register gets reloaded on a when a condition was met.
          model.add_reg :reload2, 0x58, size: 32 do |reg|
          end
          # The Reload Register stores the Value the COUNT Register gets reloaded on a when a condition was met.
          model.add_reg :reload3, 0x5C, size: 32 do |reg|
          end
        end
      end
    end
  end
end
# rubocop:enable all
