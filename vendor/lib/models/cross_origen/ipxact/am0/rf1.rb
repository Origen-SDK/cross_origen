# This file was generated by Origen, any hand edits will likely get overwritten
# Created at  9 Feb 2018 04:37AM by Stephen McGinty
# rubocop:disable all
module CrossOrigen
  module Ipxact
    module Am0
      module Rf1
        def self.extended(model)
          # register with no fields. 
          # 					No access is defined - In logfile the access of the field created 
          # 					should be write-only (and not the default read-write) because it 
          # 					inherits access from the parent register.
          model.add_reg :reg0, 0x0, size: 8 do |reg|
          end
          # register with one field. Should look exactly the same
          # 						 as the previous register (except type specific parameters)
          model.add_reg :reg1, 0x1, size: 8 do |reg|
            reg.bit 7..0, :reg1_f
          end
          # register with unused offset in the middle. Should create 
          # 						reserved field in offset 2-5. In logfile register's access_policy should be RW.
          # 						f0 - access is RW, cov: full, hard_reset: ON/3, soft_reset: OFF/0.   
          # 						rsv- access is RSVD, cov: none, hard_reset: ON/'hF, soft_reset:  OFF/0.   
          # 						f2 - access is RW, cov: full, hard_reset: ON/3, soft_reset: OFF/0.    
          # 						Update mask for the register: 'hc3. 
          # 	 					Compare mask for the register: 'hff. 
          # 					
          # 						one warning: 
          # 						No field at offset 2 that (auto generated) while a reset mask 
          # 						for 'Hard Reset' value is specified for it.
          model.add_reg :reg2, 0x2, size: 8 do |reg|
            reg.bit 7..6, :f2, reset: 0x3
            reg.bit 1..0, :f0, reset: 0x3
          end
          # register with unused offsets at both edges of register. 
          # 				    Should create reserved fields in offset 0-2 and 6-7.
          # 					rsv - access is RSVD, cov: none, hard_reset: OFF/0, soft_reset: OFF/0. 
          # 					f0  - access is RW (default), cov: full, hard_reset: ON/7, soft_reset: OFF/0. 
          # 					rsv1- access is RSVD, cov: none, hard_reset: OFF/0, soft_reset: OFF/0. 
          # 					Update mask for the register: 'h38.
          #   					Compare mask for the register: 'hff. 
          model.add_reg :reg3, 0x3, size: 8 do |reg|
            reg.bit 5..3, :f0, reset: 0x7
          end
          # register with mixed access policies.
          # 					f0 - access is RW, cov: full, hard_reset: OFF/1, soft_reset: OFF/0. 
          # 					f1 - access is RW, cov: full, hard_reset: ON/1, soft_reset: OFF/0. 
          # 					dirs - access is WO, cov: full, hard_reset: ON/2, soft_reset: OFF/0. 
          # 					more_dirs - access is RO, cov: full, hard_reset: OFF/1, soft_reset: OFF/0.  
          # 					rsv - access is RW, cov: all, hard_reset: ON/3, soft_reset: OFF/0.  
          # 					rsv is not recognized as 'reserved'.
          # 					Update mask for the register: 'hc.
          #   					Compare mask for the register: 'hf0. 
          model.add_reg :reg4, 0x4, size: 8 do |reg|
            reg.bit 7..6, :rsv, reset: 0x3
            reg.bit 5..4, :more_dirs, access: :ro
            reg.bit 3..2, :dirs, access: :wo, reset: 0x2
            reg.bit 1, :f1, reset: 0x1
            reg.bit 0, :f0
          end
          # reuse directions enumeration defined in reg4.
          # 					This will cause a new instance of a modified enumeration. 
          # 					rsv1 - access: RSVD, cov: none, hard_reset: ON/3, soft_reset: OFF/0.
          # 					dirs - access is WO (inherit from reg), cov: full, hard_reset: ON/1, soft_reset: OFF/0.
          # 					rsv - access is WO (inherit from reg), cov: full, hard_reset: OFF/4, soft_reset: OFF/0.  
          # 					rsv is not recognized as 'reserved'.
          # 					
          # 					Update mask for the register: 'fc.
          #   					Compare mask for the register: 'h3. 
          #   					
          #   					Warning:
          #   					x4 Enumeration name/value reusability.
          #   					hard reset value exist for unspecified offset
          model.add_reg :reg5, 0x5, size: 8 do |reg|
            reg.bit 7..4, :rsv
            reg.bit 3..2, :dirs, reset: 0x1
          end
          # reuse more_directions enumeration defined in reg4 
          # 					directions - access is RO, cov: full, hard_reset: ON/2, soft_reset: OFF/0.
          # 					rsv - access is RO, cov: full, hard_reset: OFF/0, soft_reset: OFF/0.  
          # 					
          # 					rsv is not identified as 'reserved'.
          # 					Reg access policy in logfile is RO.
          # 					
          # 					Update mask for the register: 'h0.
          #   					Compare mask for the register: 'hff. 
          #   					
          #   					Warning:
          #   					x4 Enumeration name/value reusability.
          model.add_reg :reg6, 0x6, size: 8 do |reg|
            reg.bit 7..2, :rsv, access: :ro
            reg.bit 1..0, :more_dirs, access: :ro, reset: 0x2
          end
        end
      end
    end
  end
end
# rubocop:enable all
